// Write C++ program for storing binary number using doubly linked lists. 
// Write functions  
//  a) to compute 1„s and 2„s complement  
//  b) add two binary numbers  




#include <iostream>
#include <cmath>

using namespace std;

// Node structure for doubly linked list
struct Node {
    int data;
    Node* next;
    Node* prev;
};

// Doubly Linked List class
class DoublyLinkedList {
private:
    Node* head;

public:
    // Constructor
    DoublyLinkedList() {
        head = nullptr;
    }

    // Function to add a node at the end of the list
    void addNode(int value) {
        Node* newNode = new Node;
        newNode->data = value;
        newNode->next = nullptr;

        if (head == nullptr) {
            head = newNode;
            newNode->prev = nullptr;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
            newNode->prev = temp;
        }
    }

    // Function to display the binary number
    void displayBinary() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data;
            temp = temp->next;
        }
        cout << endl;
    }

    // Function to compute 1's complement
    void onesComplement() {
        Node* temp = head;
        while (temp != nullptr) {
            temp->data = (temp->data == 0) ? 1 : 0;
            temp = temp->next;
        }
    }

    // Function to compute 2's complement
    void twosComplement() {
        onesComplement(); // Compute 1's complement first

        // Add 1 to the 1's complement to get 2's complement
        int carry = 1;
        Node* temp = head;
        while (temp != nullptr) {
            int sum = temp->data + carry;
            temp->data = sum % 2;
            carry = sum / 2;
            temp = temp->next;
        }
    }

    // Function to add two binary numbers
    void addBinary(DoublyLinkedList& binary2) {
        Node* temp1 = head;
        Node* temp2 = binary2.head;
        int carry = 0;

        // Traverse both lists until one of them becomes empty
        while (temp1 != nullptr && temp2 != nullptr) {
            int sum = temp1->data + temp2->data + carry;
            addNode(sum % 2);
            carry = sum / 2;
            temp1 = temp1->next;
            temp2 = temp2->next;
        }

        // Add remaining nodes of the longer list (if any)
        while (temp1 != nullptr) {
            int sum = temp1->data + carry;
            addNode(sum % 2);
            carry = sum / 2;
            temp1 = temp1->next;
        }

        while (temp2 != nullptr) {
            int sum = temp2->data + carry;
            addNode(sum % 2);
            carry = sum / 2;
            temp2 = temp2->next;
        }

        // If there is a remaining carry, add a new node
        if (carry > 0) {
            addNode(carry);
        }
    }
};

int main() {
    DoublyLinkedList binary1, binary2;

    // Adding binary digits to the first binary number
    binary1.addNode(1);
    binary1.addNode(0);
    binary1.addNode(1);

    // Displaying the first binary number
    cout << "Binary 1: ";
    binary1.displayBinary();

    // Computing 1's complement of the first binary number
    binary1.onesComplement();
    cout << "1's Complement of Binary 1: ";
    binary1.displayBinary();

    // Computing 2's complement of the first binary number
    binary1.twosComplement();
    cout << "2's Complement of Binary 1: ";
    binary1.displayBinary();

    // Adding binary digits to the second binary number
    binary2.addNode(1);
    binary2.addNode(1);
    binary2.addNode(1);

    // Displaying the second binary number
    cout << "\nBinary 2: ";
    binary2.displayBinary();

    // Adding the two binary numbers
    DoublyLinkedList sumBinary;
    sumBinary = binary1; // Copy the first binary number
    sumBinary.addBinary(binary2);

    // Displaying the sum of the binary numbers
    cout << "Sum of Binary 1 and Binary 2: ";
    sumBinary.displayBinary();

    return 0;
}
